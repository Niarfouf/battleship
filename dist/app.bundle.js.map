{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-setup/./src/class/Ship.js","webpack://template-setup/./src/class/GameBoard.js","webpack://template-setup/./src/class/Player.js","webpack://template-setup/./src/displayEndScreen.js","webpack://template-setup/./src/updateCell.js","webpack://template-setup/./src/index.js","webpack://template-setup/./src/displayPlayer.js","webpack://template-setup/./src/displayComputerGrid.js"],"sourcesContent":["export default class Ship {\n    constructor(length) {\n        this.length = length\n        this.hits = 0\n        this.sunk = false\n    }\n\n    hit() {\n        this.hits += 1\n        if (this.hits === this.length) {\n            this.sunk = true\n        }\n    }\n\n    isSunk() {\n        return this.sunk\n    }\n}\n","import Ship from './Ship'\n\nexport default class GameBoard {\n    constructor(size = 10) {\n        this.board = GameBoard.createEmptyBoard(size)\n        this.ships = []\n    }\n\n    static createEmptyBoard(size) {\n        const board = []\n        for (let i = 0; i < size; i += 1) {\n            const row = []\n            for (let j = 0; j < size; j += 1) {\n                row.push({ ship: null, hasBeenShot: false })\n            }\n            board.push(row)\n        }\n        return board\n    }\n\n    getBoard() {\n        return this.board\n    }\n\n    getShips() {\n        return this.ships\n    }\n\n    placeShip(length, coordinates) {\n        const newShip = new Ship(length)\n        if (this.verifyCoordinate(coordinates)) {\n            coordinates.forEach((coordinate) => {\n                const cell = this.board[coordinate[1]][coordinate[0]]\n                cell.ship = newShip\n            })\n            this.ships.push(newShip)\n            return true\n        }\n        return false\n    }\n\n    receiveAttack(coordinate) {\n        const markedCell = this.board[coordinate[1]][coordinate[0]]\n        if (markedCell.hasBeenShot === true) {\n            return { false: 'alreadyTouched' }\n        }\n        markedCell.hasBeenShot = true\n        if (markedCell.ship) {\n            markedCell.ship.hit()\n            if (markedCell.ship.isSunk()) {\n                return { true: 'sunk', coordinate: [...coordinate] }\n            }\n            return { true: 'touched', coordinate: [...coordinate] }\n        }\n        return { true: 'missed', coordinate: [...coordinate] }\n    }\n\n    allShipsSunk() {\n        return this.ships.reduce((response, ship) => {\n            if (!ship.sunk || response === false) {\n                return false\n            }\n            return true\n        }, true)\n    }\n\n    verifyCoordinate(coordinatesArray) {\n        let verified = true\n        coordinatesArray.forEach((coordinate) => {\n            if (\n                coordinate[0] < 0 ||\n                coordinate[1] < 0 ||\n                coordinate[0] > 9 ||\n                coordinate[1] > 9\n            ) {\n                verified = false\n            }\n            const cell = this.board[coordinate[1]][coordinate[0]]\n            if (cell.ship) {\n                verified = false\n            }\n        })\n        return verified\n    }\n}\n","export default class Player {\n    constructor(name) {\n        this.name = name\n    }\n\n    static attack(gameBoard, coordinate = Player.randomCoordinate()) {\n        return gameBoard.receiveAttack(coordinate)\n    }\n\n    static randomCoordinate() {\n        return [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]\n    }\n\n    getName() {\n        return this.name\n    }\n}\n","export default function displayEndScreen(player) {\n    const main = document.querySelector('#main')\n    main.textContent = ''\n    const endTitle = document.createElement('h1')\n    if (player.name === 'Player') {\n        endTitle.textContent = 'You win !'\n    } else {\n        endTitle.textContent = 'You lose !'\n    }\n    main.appendChild(endTitle)\n}\n","export default function updateCell(hitInfo, victim) {\n    const classSelector = `${victim}-cell`\n    const cells = document.querySelectorAll(`.${classSelector}`)\n    let cellToUpdate\n    cells.forEach((cell) => {\n        if (\n            parseInt(cell.getAttribute('x'), 10) === hitInfo.coordinate[0] &&\n            parseInt(cell.getAttribute('y'), 10) === hitInfo.coordinate[1]\n        ) {\n            cellToUpdate = cell\n        }\n    })\n    if (hitInfo.true === 'touched' || hitInfo.true === 'sunk') {\n        cellToUpdate.classList.add('red')\n        cellToUpdate.classList.remove('blue')\n        cellToUpdate.classList.remove('black')\n    }\n    if (hitInfo.true === 'missed') {\n        cellToUpdate.classList.add('yellow')\n        cellToUpdate.classList.remove('black')\n    }\n}\n","import './styles.css'\n\nimport displayComputerGrid from './displayComputerGrid'\n\nimport displayPlayerGrid from './displayPlayer'\n\nimport GameBoard from './class/GameBoard'\nimport Player from './class/Player'\nimport displayEndScreen from './displayEndScreen'\nimport updateCell from './updateCell'\n\nconst playerBoard = new GameBoard()\nconst computerBoard = new GameBoard()\nconst player = new Player('Player')\nconst computer = new Player('Computer')\nplayerBoard.placeShip(3, [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n])\nplayerBoard.placeShip(4, [\n    [5, 1],\n    [5, 2],\n    [5, 3],\n    [5, 4],\n])\ncomputerBoard.placeShip(3, [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n])\ncomputerBoard.placeShip(4, [\n    [5, 1],\n    [5, 2],\n    [5, 3],\n    [5, 4],\n])\n\ndisplayPlayerGrid(playerBoard, player)\ndisplayComputerGrid(computerBoard, computer)\n\nconst enemyCells = document.querySelectorAll('.computer-cell')\nenemyCells.forEach((cell) => {\n    cell.addEventListener('click', () => {\n        const responsePlayerAttack = Player.attack(computerBoard, [\n            parseInt(cell.getAttribute('x'), 10),\n            parseInt(cell.getAttribute('y'), 10),\n        ])\n        if (responsePlayerAttack.true) {\n            updateCell(responsePlayerAttack, 'computer')\n            if (computerBoard.allShipsSunk()) {\n                displayEndScreen(player)\n                return\n            }\n            let responseComputerAttack = Player.attack(playerBoard)\n            while (!responseComputerAttack.true) {\n                responseComputerAttack = Player.attack(playerBoard)\n            }\n\n            updateCell(responseComputerAttack, 'player')\n            if (playerBoard.allShipsSunk()) {\n                displayEndScreen(computer)\n            }\n        }\n    })\n})\n","export default function displayPlayerGrid(playerBoard, player) {\n    const main = document.querySelector('#main')\n\n    const playerDiv = document.createElement('div')\n    const playerGrid = document.createElement('div')\n    const playerName = document.createElement('h1')\n    playerName.innerText = player.getName()\n    playerDiv.appendChild(playerName)\n\n    playerGrid.classList.add('grid')\n    playerBoard.getBoard().forEach((row, y) => {\n        row.forEach((cell, x) => {\n            const rect = document.createElement('rect')\n            if (cell.ship) {\n                rect.classList.add('blue')\n            } else {\n                rect.classList.add('black')\n            }\n            rect.classList.add('player-cell')\n            rect.setAttribute('x', `${x}`)\n            rect.setAttribute('y', `${y}`)\n\n            playerGrid.appendChild(rect)\n        })\n    })\n    playerDiv.appendChild(playerGrid)\n    main.appendChild(playerDiv)\n}\n","export default function displayComputerGrid(computerBoard, computer) {\n    const main = document.querySelector('#main')\n\n    const computerDiv = document.createElement('div')\n\n    const computerGrid = document.createElement('div')\n    computerGrid.classList.add('grid')\n\n    const computerName = document.createElement('h1')\n    computerName.innerText = computer.getName()\n    computerDiv.appendChild(computerName)\n\n    computerBoard.getBoard().forEach((row, y) => {\n        row.forEach((cell, x) => {\n            const rect = document.createElement('rect')\n            rect.classList.add('computer-cell')\n            rect.classList.add('black')\n            rect.setAttribute('x', `${x}`)\n            rect.setAttribute('y', `${y}`)\n            computerGrid.appendChild(rect)\n        })\n    })\n    computerDiv.appendChild(computerGrid)\n    main.appendChild(computerDiv)\n}\n"],"names":["Ship","constructor","length","this","hits","sunk","hit","isSunk","GameBoard","size","board","createEmptyBoard","ships","i","row","j","push","ship","hasBeenShot","getBoard","getShips","placeShip","coordinates","newShip","verifyCoordinate","forEach","coordinate","receiveAttack","markedCell","false","true","allShipsSunk","reduce","response","coordinatesArray","verified","Player","name","attack","gameBoard","randomCoordinate","Math","floor","random","getName","displayEndScreen","player","main","document","querySelector","textContent","endTitle","createElement","appendChild","updateCell","hitInfo","victim","classSelector","cellToUpdate","querySelectorAll","cell","parseInt","getAttribute","classList","add","remove","playerBoard","computerBoard","computer","playerDiv","playerGrid","playerName","innerText","y","x","rect","setAttribute","displayPlayerGrid","computerDiv","computerGrid","computerName","displayComputerGrid","addEventListener","responsePlayerAttack","responseComputerAttack"],"sourceRoot":""}